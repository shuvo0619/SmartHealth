@model SmartHealth.Model.Models.UserAndRole
@{
    ViewBag.Title = "Chat";

}
<h2></h2>
<fieldset>
    <legend style="color:orangered">Welcome To Smart Health Patient Doctor problem solving section</legend>
</fieldset>

@*<div class="form-group col-xl-12">
        @Html.HiddenFor(model => model.user.UserId, new { id= "UserId"})

        @{
            var currentId = @Session["UserName"];

        }
        <label style="color: blue; font-style: oblique;font-size: medium" id="label1">Write Your Message Here!</label><br />
        <textarea class="form-control" rows="4" cols="10" id="msg" placeholder="Share your problem here's......."></textarea>
        <br />
        <input type="button"  id="sendmessage" value="Send" />
        <br />
        <br />
        <label style="color: blue;font-style:oblique;font-size:medium" id="label2">Chat Conversations History</label>
        <div class="container chatArea">
            <input type="hidden" id="displayname" />
            <ul id="discussion"></ul>

        </div>


    </div>
*@

<div style="width: 55%; border: solid 1px Red; height: 40px">
    @Html.HiddenFor(model => model.user.UserId, new { id = "UserId" })
    <h3 style="margin: 10px 0px 0px 10px">
        <span id="spnName"></span>
        <span id="connID"></span>        
        <span id="usersCount"></span>
    </h3>
</div>
<div style="width: 55%; border: solid 1px Red; height: auto">
    <div style="height: auto" id="divUsers"></div>
    <div style="height: 70%" id="divChat"></div>
    <div style="border: dashed 1px Black; margin-top:5%;">
        <div style="float: left; width: 20%; padding: 4px">
            <input type="text" style="width: 100%" id="txtTo" />
        </div>
        <div style="float: left; width: 60%; padding: 4px">
            <input type="text" style="width: 100%" id="txtMsg" />
        </div>
        <div style="float: right; width: 15%; padding: 4px">
            <input type="button" id="btnSend" value="Send Message" style="width: 45px" />
        </div>
        
    </div>
</div>

@section scripts {
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>

<script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
    $(document).ready(function () {
        var _name = window.prompt("Please Enter your name");
        $("#spnName").text(_name);
        
            var UserId = $("#UserId").val();
            //var msg = $("#msg").val()
            $('#txtMsg').val('');
           
            //This will take the user name and display it to the <span id="spnName"></span>.
            //Declare the proxy instance using the auto-generated proxy class

            var chatProxy = $.connection.signalRChatHub;

            // Call the hubconnect method which saves user details at server and bind the btnClick event when connection to the hub is started

            $.connection.hub.start().done(function () {
                try {
                    chatProxy.server.hubconnect($("#spnName").text(), UserId, $("#connID").text());
                } catch (e) { alert(e.message); }

                $("#btnSend").click(function () {

                    // Send private Message to the Hub using the proxy instance

                    chatProxy.server.send_PrivateMessage($("#spnName").text(),  $("#txtMsg").val(), UserId);
                    $('#txtMsg').val('').focus();
                    
                })

                //Callback function which the hub will call when it has finished processing,
                // is attached to the proxy
                chatProxy.client.receiveMessage = function (msgFrom, msg, senderid) {
                    if (msgFrom == "NewConnection") {
                        //displays new client connected information to other users than connected one
                        $("#usersCount").text(senderid);
                        $('#divUsers').append('<li>' + msg + '</li>')
                    }
                    else if (msgFrom == "ChatHub") {
                        //displays the total online user counts and connection id of current user to himself only
                        $("#usersCount").text(senderid);
                        $("#connID").text(msg);

                    }
                    else if (msgFrom == "RU") {
                        //this will displays the result of record update in database at server side and update the list of online users
                        var online = senderid.split('#');
                        var length = online.length;
                        for (var i = 0; i < length; i++) {
                            $('#divUsers').append('<li>' + online[i] + '</li>')
                        }

                        $('#divChat').append('<li><strong>' + msgFrom
                            + '</strong>:&nbsp;&nbsp;' + msg + '</li>')
                    }
                    else {
                        //it displays the message in message window while connection id of sender in a textbox,
                        $("#txtTo").val(senderid);
                        $('#divChat').append('<li><strong>' + msgFrom
                            + '</strong>:&nbsp;&nbsp;' + msg + '</li>')
                    }
                };
            })
        })
         </script>
}

@*aa
         $(function () {
                // Declare a proxy to reference the hub.
                var chat = $.connection.chatHub;
                // Create a function that the hub can call to broadcast messages.
                chat.client.addChatMessage = function (who, message) {
                    // Html encode display name and message.
                    var encodedName = $('<div />').text(who).html();
                    alert(encodedName).value()
                    var encodedMsg = $('<div />').text(message).html();
                    // Add the message to the page.
                    $('#chat').append('<li><strong>' + encodedName
                        + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
                };

                // Start the connection.
                $.connection.hub.start().done(function () {
                    $('#sendmessage').click(function () {
                        // Call the Send method on the hub.
                        chat.server.sendChatMessage($('#displayname').val(), $('#message').val());
                        // Clear text box and reset focus for next comment.
                        $('#message').val('').focus();
                        alert(('#message').value)
                    });
                });
            });


    vv*@

